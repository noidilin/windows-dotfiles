[
  //     ____                                        _
  //    / ___|   ___   _ __     ___   _ __    __ _  | |
  //   | |  _   / _ \ | '_ \   / _ \ | '__|  / _` | | |
  //   | |_| | |  __/ | | | | |  __/ | |    | (_| | | |
  //    \____|  \___| |_| |_|  \___| |_|     \__,_| |_|
  //

  // command palette
  { "key": "f3", "command": "workbench.action.showCommands" },
  // show context menu
  { "key": "alt+i", "command": "editor.action.showContextMenu", "when": "editorTextFocus" },
  // side bar visibility
  { "key": "shift+alt+-", "command": "workbench.action.toggleSidebarVisibility" },
  { "key": "shift+alt+=", "command": "workbench.action.toggleAuxiliaryBar" },
  // hide notification
  { "key": "escape", "command": "notifications.hideToasts", "when": "notificationToastsVisible" },
  // add selection to next find match
  { "key": "alt+n", "command": "editor.action.addSelectionToNextFindMatch", "when": "editorFocus" },

  // pane + window navigate
  { "key": "ctrl+h", "command": "workbench.action.navigateLeft" },
  { "key": "ctrl+j", "command": "workbench.action.navigateDown" },
  { "key": "ctrl+k", "command": "workbench.action.navigateUp" },
  { "key": "ctrl+l", "command": "workbench.action.navigateRight" },

  // format selection
  // { "key": "ctrl+k ctrl+f", "command": "editor.action.formatSelection", "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" },
  // toggle block comment
  { "key": "ctrl+shift+/", "command": "editor.action.blockComment", "when": "editorTextFocus && !editorReadonly" },

  //    _____                             _                   _
  //   |_   _|   ___   _ __   _ __ ___   (_)  _ __     __ _  | |
  //     | |    / _ \ | '__| | '_ ` _ \  | | | '_ \   / _` | | |
  //     | |   |  __/ | |    | | | | | | | | | | | | | (_| | | |
  //     |_|    \___| |_|    |_| |_| |_| |_| |_| |_|  \__,_| |_|
  //

  // terminal shortcut
  { "key": "ctrl+a c", "command": "workbench.action.terminal.new", "when": "terminalFocus" },
  { "key": "ctrl+a \\", "command": "workbench.action.terminal.split", "when": "terminalFocus" },
  { "key": "ctrl+a x", "command": "workbench.action.terminal.kill", "when": "terminalFocus" },
  /// -- terminal focus pane
  { "key": "ctrl+a ctrl+l", "command": "workbench.action.terminal.focusNextPane", "when": "terminalFocus" },
  { "key": "ctrl+a ctrl+h", "command": "workbench.action.terminal.focusPreviousPane", "when": "terminalFocus" },
  /// -- terminal focus tab
  { "key": "ctrl+a ctrl+j", "command": "workbench.action.terminal.focusPrevious", "when": "terminalFocus" },
  { "key": "ctrl+a ctrl+k", "command": "workbench.action.terminal.focusNext", "when": "terminalFocus" },

  // panel shortcut
  { "key": "ctrl+a ctrl+`", "command": "workbench.action.togglePanel" },
  { "key": "ctrl+a ]", "command": "workbench.action.nextPanelView", "when": "panelFocus" },
  { "key": "ctrl+a [", "command": "workbench.action.previousPanelView", "when": "panelFocus" },
  /// - panel size
  { "key": "ctrl+a z", "command": "workbench.action.toggleMaximizedPanel", "when": "panelFocus" },
  { "key": "ctrl+a shift+j", "command": "workbench.action.decreaseViewSize", "when": "panelFocus" },
  { "key": "ctrl+a shift+k", "command": "workbench.action.increaseViewSize", "when": "panelFocus" },

  // -- retrieve original <c-a> behavior
  { "key": "ctrl+a ctrl+a", "command": "editor.action.selectAll" },
  { "key": "ctrl+a ctrl+a", "command": "list.selectAll", "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
  { "key": "ctrl+a ctrl+a", "command": "notebook.cell.output.selectAll", "when": "notebookEditorFocused && notebookOutputFocused" },

  //    _____          _                          _
  //   | ____| __  __ | |_    ___   _ __    ___  (_)   ___    _ __
  //   |  _|   \ \/ / | __|  / _ \ | '_ \  / __| | |  / _ \  | '_ \
  //   | |___   >  <  | |_  |  __/ | | | | \__ \ | | | (_) | | | | |
  //   |_____| /_/\_\  \__|  \___| |_| |_| |___/ |_|  \___/  |_| |_|
  //

  // which-key extension keys
  { "key": "f1", "command": "whichkey.show", "when": "editorTextFocus" },

  // neovim
  // 'args' is the keystroke that is going to send to Neovim
  { "key": "shift+space", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "<S-space>" },
  { "key": "[", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "[" },
  { "key": "]", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "]" },
  { "key": "alt+a", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "<A-a>" },
  { "key": "alt+x", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "<A-x>" },

  // hover editor.action.showHover
  { "key": "shift+k", "command": "editor.debug.action.showDebugHover", "when": "editorTextFocus && inDebugMode" },
  { "key": "shift+k", "command": "list.showHover", "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
  // -- neovim extension keybinding default
  // { "key": "shift+k", "command": "editor.action.showHover", "when": "editorHoverVisible && editorTextFocus && neovim.init && neovim.mode == 'normal'" },

  // mini-move
  { "key": "alt+left", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Left>" },
  { "key": "alt+right", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Right>" },
  { "key": "alt+down", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Down>" },
  { "key": "alt+up", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Up>" },
  /// -- disable: go back and forward
  { "key": "alt+left", "command": "-workbench.action.navigateBack", "when": "canNavigateBack" },
  { "key": "alt+right", "command": "-workbench.action.navigateForward", "when": "canNavigateForward" },

  //     ____   _            _
  //    / ___| | |_   _ __  | |      _       _   _
  //   | |     | __| | '__| | |    _| |_    | | | |
  //   | |___  | |_  | |    | |   |_   _|   | |_| |
  //    \____|  \__| |_|    |_|     |_|      \__, |
  //                                         |___/
  //   <c-y> to confirm, extend
  { "key": "ctrl+y", "command": "-redo" },

  // - disable: tab
  { "key": "tab", "command": "-editor.action.inlineEdit.accept", "when": "cursorAtInlineEdit && inlineEditVisible && !editorReadonly" },
  { "key": "tab", "command": "-editor.action.inlineSuggest.commit", "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible" },
  { "key": "tab", "command": "-editor.emmet.action.expandAbbreviation", "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
  { "key": "tab", "command": "-acceptSelectedSuggestion", "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
  { "key": "tab", "command": "-insertBestCompletion", "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
  { "key": "tab", "command": "-insertNextSuggestion", "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
  { "key": "tab", "command": "-insertSnippet", "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode" },
  { "key": "tab", "command": "-whichkey.triggerKey", "when": "whichkeyVisible" },
  { "key": "tab", "command": "-workbench.action.terminal.acceptSelectedSuggestion", "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },

  // - add <tab> key's feature to <c-y>
  { "key": "ctrl+y", "command": "editor.action.inlineEdit.accept", "when": "cursorAtInlineEdit && inlineEditVisible && !editorReadonly" },
  { "key": "ctrl+y", "command": "editor.action.inlineSuggest.commit", "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible" },
  { "key": "ctrl+y", "command": "editor.emmet.action.expandAbbreviation", "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
  { "key": "ctrl+y", "command": "acceptSelectedSuggestion", "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
  { "key": "ctrl+y", "command": "insertBestCompletion", "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
  { "key": "ctrl+y", "command": "insertNextSuggestion", "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
  { "key": "ctrl+y", "command": "insertSnippet", "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode" },
  { "key": "ctrl+y", "command": "whichkey.triggerKey", "when": "whichkeyVisible" },
  { "key": "ctrl+y", "command": "workbench.action.terminal.acceptSelectedSuggestion", "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },

  // - add <cr> key's feature to <c-y>
  { "key": "ctrl+y", "command": "acceptSelectedCodeAction", "when": "codeActionMenuVisible" },
  { "key": "ctrl+y", "command": "acceptSelectedSuggestion", "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },
  { "key": "ctrl+y", "command": "breadcrumbs.selectFocused", "when": "breadcrumbsActive && breadcrumbsVisible" },
  { "key": "ctrl+y", "command": "revealReference", "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused" },
  { "key": "ctrl+y", "command": "search.action.openResult", "when": "fileMatchOrMatchFocus && searchViewletVisible" },
  { "key": "ctrl+y", "command": "workbench.action.acceptSelectedQuickOpenItem", "when": "inQuickOpen" }
]
