[
  //     ____                                        _
  //    / ___|   ___   _ __     ___   _ __    __ _  | |
  //   | |  _   / _ \ | '_ \   / _ \ | '__|  / _` | | |
  //   | |_| | |  __/ | | | | |  __/ | |    | (_| | | |
  //    \____|  \___| |_| |_|  \___| |_|     \__,_| |_|
  //

  // avoid zooming
  { "key": "ctrl+shift+-", "command": "-workbench.action.zoomOut" },
  { "key": "ctrl+shift+=", "command": "-workbench.action.zoomIn" },

  // open preference
  { "key": "shift+alt+u", "command": "workbench.action.openSettingsJson" },

  // side bar visibility
  { "key": "shift+alt+-", "command": "workbench.action.toggleSidebarVisibility" },
  { "key": "shift+alt+=", "command": "workbench.action.toggleAuxiliaryBar" },
  // { "key": "ctrl+b", "command": "-workbench.action.toggleSidebarVisibility" }, /// disable original
  // { "key": "ctrl+alt+b", "command": "-workbench.action.toggleAuxiliaryBar" }, /// disable original

  // command palette
  { "key": "f3", "command": "workbench.action.showCommands" },
  // hide notification
  { "key": "escape", "command": "notifications.hideToasts", "when": "notificationToastsVisible" },
  // quick open
  { "key": "alt+o", "command": "workbench.action.quickOpen" },
  // show context menu
  { "key": "alt+i", "command": "editor.action.showContextMenu", "when": "editorTextFocus" },

  //    _____       _   _   _     _
  //   | ____|   __| | (_) | |_  (_)  _ __     __ _
  //   |  _|    / _` | | | | __| | | | '_ \   / _` |
  //   | |___  | (_| | | | | |_  | | | | | | | (_| |
  //   |_____|  \__,_| |_|  \__| |_| |_| |_|  \__, |
  //                                          |___/

  // -- add selection to next find match
  { "key": "alt+d", "command": "editor.action.addSelectionToNextFindMatch", "when": "editorFocus" },
  { "key": "ctrl+d", "command": "-editor.action.addSelectionToNextFindMatch", "when": "editorFocus" },

  // -- toggle block comment
  { "key": "ctrl+shift+/", "command": "editor.action.blockComment", "when": "editorTextFocus && !editorReadonly" },
  { "key": "shift+alt+a", "command": "-editor.action.blockComment", "when": "editorTextFocus && !editorReadonly" },

  // -- emmet behavior
  { "key": "ctrl+m", "command": "-editor.action.toggleTabFocusMode" },
  { "key": "ctrl+m ctrl+w", "command": "editor.emmet.action.wrapWithAbbreviation", "when": "editorTextFocus" },
  { "key": "ctrl+m ctrl+r", "command": "editor.emmet.action.updateTag", "when": "editorTextFocus" },
  { "key": "ctrl+m ctrl+x", "command": "editor.emmet.action.removeTag", "when": "editorTextFocus" },
  { "key": "ctrl+m ctrl+m", "command": "editor.emmet.action.matchTag", "when": "editorTextFocus" },

  //    _   _                        ____   _____   ____    _
  //   | \ | |   ___  __      __    / ___| |_   _| |  _ \  | |
  //   |  \| |  / _ \ \ \ /\ / /   | |       | |   | |_) | | |
  //   | |\  | |  __/  \ V  V /    | |___    | |   |  _ <  | |___
  //   |_| \_|  \___|   \_/\_/      \____|   |_|   |_| \_\ |_____|
  //

  /// -- open folder, file, recent
  { "key": "ctrl+w ctrl+o", "command": "workbench.action.files.openFolder", "when": "openFolderWorkspaceSupport" },
  { "key": "ctrl+w ctrl+f", "command": "workbench.action.files.openFile" },
  { "key": "ctrl+w ctrl+r", "command": "workbench.action.openRecent" },
  /// -- preference (theme, keybindings)
  { "key": "ctrl+w ctrl+t", "command": "workbench.action.selectTheme" },
  { "key": "ctrl+w ctrl+s", "command": "workbench.action.openGlobalKeybindings" },
  { "key": "ctrl+w ctrl+k", "command": "editor.action.defineKeybinding", "when": "resource == 'vscode-userdata:/c%3A/Users/Lin/AppData/Roaming/Code/User/keybindings.json'" },
  /// -- change language mode
  { "key": "ctrl+w ctrl+m", "command": "workbench.action.editor.changeLanguageMode", "when": "!notebookEditorFocused" },

  //    _____                             _                   _
  //   |_   _|   ___   _ __   _ __ ___   (_)  _ __     __ _  | |
  //     | |    / _ \ | '__| | '_ ` _ \  | | | '_ \   / _` | | |
  //     | |   |  __/ | |    | | | | | | | | | | | | | (_| | | |
  //     |_|    \___| |_|    |_| |_| |_| |_| |_| |_|  \__,_| |_|
  //
  //   section: terminal

  // terminal shortcut
  { "key": "ctrl+a c", "command": "workbench.action.terminal.new", "when": "terminalFocus" }, // create tab
  { "key": "ctrl+a \\", "command": "workbench.action.terminal.split", "when": "terminalFocus" },
  { "key": "ctrl+a x", "command": "workbench.action.terminal.kill", "when": "terminalFocus" }, // close pane
  /// -- terminal focus pane
  { "key": "ctrl+a ctrl+l", "command": "workbench.action.terminal.focusNextPane", "when": "terminalFocus" },
  { "key": "ctrl+a ctrl+h", "command": "workbench.action.terminal.focusPreviousPane", "when": "terminalFocus" },
  /// -- terminal focus tab
  { "key": "ctrl+a ctrl+j", "command": "workbench.action.terminal.focusPrevious", "when": "terminalFocus" },
  { "key": "ctrl+a ctrl+k", "command": "workbench.action.terminal.focusNext", "when": "terminalFocus" },
  /// -- terminal Size
  { "key": "ctrl+a z", "command": "workbench.action.toggleMaximizedPanel", "when": "terminalFocus" },
  { "key": "ctrl+a shift+j", "command": "workbench.action.decreaseViewSize", "when": "!editorFocus" },
  { "key": "ctrl+a shift+k", "command": "workbench.action.increaseViewSize", "when": "!editorFocus" },

  // -- original ctrl + a behavior
  { "key": "ctrl+a ctrl+a", "command": "editor.action.selectAll" },
  { "key": "ctrl+a ctrl+a", "command": "list.selectAll", "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
  { "key": "ctrl+a ctrl+a", "command": "notebook.cell.output.selectAll", "when": "notebookEditorFocused && notebookOutputFocused" },
  // ---- disable original
  { "key": "ctrl+a", "command": "-editor.action.selectAll" },
  { "key": "ctrl+a", "command": "-list.selectAll", "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
  { "key": "ctrl+a", "command": "-notebook.cell.output.selectAll", "when": "notebookEditorFocused && notebookOutputFocused" },

  //   __        __  _               _                                   ____
  //   \ \      / / (_)  _ __     __| |   ___   __      __              / ___|  _ __    ___    _   _   _ __
  //    \ \ /\ / /  | | | '_ \   / _` |  / _ \  \ \ /\ / /    _____    | |  _  | '__|  / _ \  | | | | | '_ \
  //     \ V  V /   | | | | | | | (_| | | (_) |  \ V  V /    |_____|   | |_| | | |    | (_) | | |_| | | |_) |
  //      \_/\_/    |_| |_| |_|  \__,_|  \___/    \_/\_/                \____| |_|     \___/   \__,_| | .__/
  //                                                                                                  |_|
  //   section: pane, window (group), buffer (tab)
  //   HINT: editor is similar to buffer, but display in a tab-like appearance

  // -- pane + window navigate
  { "key": "ctrl+h", "command": "workbench.action.navigateLeft" },
  { "key": "ctrl+j", "command": "workbench.action.navigateDown" },
  { "key": "ctrl+k", "command": "workbench.action.navigateUp" },
  { "key": "ctrl+l", "command": "workbench.action.navigateRight" },

  // window swap (vscode only)
  { "key": "ctrl+w shift+h", "command": "workbench.action.moveActiveEditorGroupLeft" },
  { "key": "ctrl+w shift+j", "command": "workbench.action.moveActiveEditorGroupDown" },
  { "key": "ctrl+w shift+k", "command": "workbench.action.moveActiveEditorGroupUp" },
  { "key": "ctrl+w shift+l", "command": "workbench.action.moveActiveEditorGroupRight" },

  //    _____          _                          _
  //   | ____| __  __ | |_    ___   _ __    ___  (_)   ___    _ __
  //   |  _|   \ \/ / | __|  / _ \ | '_ \  / __| | |  / _ \  | '_ \
  //   | |___   >  <  | |_  |  __/ | | | | \__ \ | | | (_) | | | | |
  //   |_____| /_/\_\  \__|  \___| |_| |_| |___/ |_|  \___/  |_| |_|
  //

  // which-key extension keys
  { "key": "f1", "command": "whichkey.show", "when": "editorTextFocus && neovim.mode == 'normal'" },
  { "key": "f1", "command": "-workbench.action.showCommands" }, /// disable original

  // neovim

  // -- disable: go back and forward
  { "key": "alt+left", "command": "-workbench.action.navigateBack", "when": "canNavigateBack" },
  { "key": "alt+right", "command": "-workbench.action.navigateForward", "when": "canNavigateForward" },

  {
    "key": "shift+space", // the key sequence to activate the binding
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.mode != insert", // don't activate during insert mode
    "args": "<S-space>" // the input to send to Neovim
  },
  { "key": "[", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "[" },
  { "key": "]", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "]" },
  { "key": "alt+a", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "<A-a>" },
  { "key": "alt+x", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "<A-x>" },

  // hover editor.action.showHover
  { "key": "shift+k", "command": "editor.debug.action.showDebugHover", "when": "editorTextFocus && inDebugMode" },
  { "key": "shift+k", "command": "list.showHover", "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
  // -- this is neovim extension keybinding
  // { "key": "shift+k", "command": "editor.action.showHover", "when": "editorHoverVisible && editorTextFocus && neovim.init && neovim.mode == 'normal'" },

  // mini-move
  { "key": "alt+left", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Left>" },
  { "key": "alt+right", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Right>" },
  { "key": "alt+down", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Down>" },
  { "key": "alt+up", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Up>" }

  //    ____    _                 _       _
  //   |  _ \  (_)  ___    __ _  | |__   | |   ___
  //   | | | | | | / __|  / _` | | '_ \  | |  / _ \
  //   | |_| | | | \__ \ | (_| | | |_) | | | |  __/
  //   |____/  |_| |___/  \__,_| |_.__/  |_|  \___|
  //

  // -- [[ ctrl+n, ctrl+p, ctrl+y ]] disable
  // { "key": "ctrl+n", "command": "-workbench.action.files.newUntitledFile" }
  // { "key": "ctrl+p", "command": "-workbench.action.quickOpenNavigateNextInFilePicker", "when": "inFilesPicker && inQuickOpen" },
  // { "key": "ctrl+p", "command": "-workbench.action.quickOpen" }
  // { "key": "ctrl+y", "command": "-redo" }

  // -- [[ ctrl + h, j, k, l ]] disable
  /*   { "key": "ctrl+h", "command": "-editor.action.startFindReplaceAction", "when": "editorFocus || editorIsOpen" },
  { "key": "ctrl+h", "command": "-whichkey.searchBindings", "when": "whichkeyVisible" },
  { "key": "ctrl+j", "command": "-workbench.action.togglePanel" },
  { "key": "ctrl+l", "command": "-workbench.action.chat.newChat", "when": "chatIsEnabled && inChat" },
  { "key": "ctrl+l", "command": "-expandLineSelection", "when": "textInputFocus" },
  { "key": "ctrl+l", "command": "-notebook.centerActiveCell", "when": "notebookEditorFocused" }, */

  // -- ctrl+k
  // ---- views
  /*   { "key": "ctrl+k ctrl+o", "command": "-workbench.action.files.openFolder", "when": "openFolderWorkspaceSupport" },
  { "key": "ctrl+k ctrl+t", "command": "-workbench.action.selectTheme" },
  { "key": "ctrl+k ctrl+s", "command": "-workbench.action.openGlobalKeybindings" }, */

  // ---- keybindings
  /*   { "key": "ctrl+k ctrl+r", "command": "-workbench.action.keybindingsReference" }, /// disable conflict
  { "key": "ctrl+k ctrl+k", "command": "-editor.action.defineKeybinding", "when": "resource == 'vscode-userdata:/c%3A/Users/Lin/AppData/Roaming/Code/User/keybindings.json'" }, */

  // ---- hover
  /*   { "key": "ctrl+k ctrl+i", "command": "-editor.debug.action.showDebugHover", "when": "editorTextFocus && inDebugMode" },
  { "key": "ctrl+k ctrl+i", "command": "-list.showHover", "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
  { "key": "ctrl+k ctrl+i", "command": "-editor.action.showHover", "when": "editorTextFocus" },
  { "key": "ctrl+k ctrl+i", "command": "-workbench.action.terminal.focusHover", "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" }, */

  // ---- fold
  /*   { "key": "ctrl+k ctrl+,", "command": "-editor.createFoldingRangeFromSelection", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+.", "command": "-editor.removeManualFoldingRanges", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+l", "command": "-editor.toggleFold", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+shift+l", "command": "-editor.toggleFoldRecursively", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+0", "command": "-editor.foldAll", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+/", "command": "-editor.foldAllBlockComments", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+-", "command": "-editor.foldAllExcept", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+8", "command": "-editor.foldAllMarkerRegions", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+1", "command": "-editor.foldLevel1", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+2", "command": "-editor.foldLevel2", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+3", "command": "-editor.foldLevel3", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+4", "command": "-editor.foldLevel4", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+5", "command": "-editor.foldLevel5", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+6", "command": "-editor.foldLevel6", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+7", "command": "-editor.foldLevel7", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+[", "command": "-editor.foldRecursively", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+j", "command": "-editor.unfoldAll", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+=", "command": "-editor.unfoldAllExcept", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+9", "command": "-editor.unfoldAllMarkerRegions", "when": "editorTextFocus && foldingEnabled" },
  { "key": "ctrl+k ctrl+]", "command": "-editor.unfoldRecursively", "when": "editorTextFocus && foldingEnabled" }, */

  // ---- notebook
  /*   { "key": "ctrl+k i", "command": "-notebook.cell.chat.start", "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus" },
  { "key": "ctrl+k ctrl+c", "command": "-notebook.cell.collapseCellInput", "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed" },
  { "key": "ctrl+k t", "command": "-notebook.cell.collapseCellOutput", "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed" },
  { "key": "ctrl+k ctrl+c", "command": "-notebook.cell.expandCellInput", "when": "notebookCellInputIsCollapsed && notebookCellListFocused" },
  { "key": "ctrl+k t", "command": "-notebook.cell.expandCellOutput", "when": "notebookCellListFocused && notebookCellOutputIsCollapsed" },
  { "key": "ctrl+k ctrl+shift+\\", "command": "-notebook.cell.split", "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused" },
  { "key": "ctrl+k y", "command": "-notebook.cell.toggleOutputScrolling", "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus" },
  { "key": "ctrl+k i", "command": "-notebook.cell.chat.start", "when": "config.notebook.experimental.cellChat && inlineChatHasProvider && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && inlineChatHasProvider && notebookEditable && notebookEditorFocused && !inputFocus" }, */

  // ---- comment
  /*   { "key": "ctrl+k ctrl+c", "command": "-editor.action.addCommentLine", "when": "editorTextFocus && !editorReadonly" },
  { "key": "ctrl+k ctrl+alt+c", "command": "-workbench.action.addComment" },
  { "key": "ctrl+k ctrl+alt+down", "command": "-editor.action.nextCommentingRange", "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'" },
  { "key": "ctrl+k ctrl+alt+up", "command": "-editor.action.previousCommentingRange", "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'" },
  { "key": "ctrl+k ctrl+u", "command": "-editor.action.removeCommentLine", "when": "editorTextFocus && !editorReadonly" }, */

  // ---- view
  /*   { "key": "ctrl+k ctrl+shift+w", "command": "-workbench.action.closeAllGroups" },
  { "key": "ctrl+k ctrl+w", "command": "-workbench.action.closeAllEditors" },
  { "key": "ctrl+k w", "command": "-workbench.action.closeEditorsInGroup" },
  { "key": "ctrl+k u", "command": "-workbench.action.closeUnmodifiedEditors" },
  { "key": "ctrl+k o", "command": "-workbench.action.copyEditorToNewWindow", "when": "activeEditor" },
  { "key": "ctrl+k ctrl+up", "command": "-workbench.action.focusAboveGroup" },
  { "key": "ctrl+k ctrl+down", "command": "-workbench.action.focusBelowGroup" },
  { "key": "ctrl+k ctrl+left", "command": "-workbench.action.focusLeftGroup" },
  { "key": "ctrl+k ctrl+right", "command": "-workbench.action.focusRightGroup" },
  { "key": "ctrl+k ctrl+shift+\\", "command": "-workbench.action.joinEditorInGroup", "when": "sideBySideEditorActive" },
  { "key": "ctrl+k enter", "command": "-workbench.action.keepEditor" },
  { "key": "ctrl+k down", "command": "-workbench.action.moveActiveEditorGroupDown" },
  { "key": "ctrl+k left", "command": "-workbench.action.moveActiveEditorGroupLeft" },
  { "key": "ctrl+k right", "command": "-workbench.action.moveActiveEditorGroupRight" },
  { "key": "ctrl+k up", "command": "-workbench.action.moveActiveEditorGroupUp" },
  { "key": "ctrl+k ctrl+pagedown", "command": "-workbench.action.nextEditorInGroup" },
  { "key": "ctrl+k ctrl+pageup", "command": "-workbench.action.previousEditorInGroup" },
  { "key": "ctrl+k shift+enter", "command": "-workbench.action.pinEditor", "when": "!activeEditorIsPinned" },
  { "key": "ctrl+k ctrl+\\", "command": "-workbench.action.splitEditorDown" },
  { "key": "ctrl+k ctrl+shift+\\", "command": "-workbench.action.splitEditorInGroup", "when": "activeEditorCanSplitInGroup" },
  { "key": "ctrl+k ctrl+\\", "command": "-workbench.action.splitEditorLeft" },
  { "key": "ctrl+k ctrl+\\", "command": "-workbench.action.splitEditorOrthogonal" },
  { "key": "ctrl+k ctrl+\\", "command": "-workbench.action.splitEditorRight" },
  { "key": "ctrl+k ctrl+\\", "command": "-workbench.action.splitEditorUp" },
  { "key": "ctrl+k z", "command": "-workbench.action.toggleZenMode", "when": "!isAuxiliaryWindowFocusedContext" },
  { "key": "ctrl+k shift+enter", "command": "-workbench.action.unpinEditor", "when": "activeEditorIsPinned" },
  { "key": "ctrl+k e", "command": "-workbench.files.action.focusOpenEditorsView", "when": "workbench.explorer.openEditorsView.active" },
  { "key": "ctrl+k down", "command": "-views.moveViewDown", "when": "focusedView != ''" },
  { "key": "ctrl+k left", "command": "-views.moveViewLeft", "when": "focusedView != ''" },
  { "key": "ctrl+k right", "command": "-views.moveViewRight", "when": "focusedView != ''" },
  { "key": "ctrl+k up", "command": "-views.moveViewUp", "when": "focusedView != ''" },
  { "key": "ctrl+k ctrl+m", "command": "-workbench.action.toggleMaximizeEditorGroup", "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups" }, */

  // ---- files
  /*   { "key": "ctrl+k c", "command": "-workbench.files.action.compareWithClipboard" },
  { "key": "ctrl+k d", "command": "-workbench.files.action.compareWithSaved" },
  { "key": "ctrl+k ctrl+shift+c", "command": "-copyRelativeFilePath", "when": "!editorFocus" },
  { "key": "ctrl+k ctrl+shift+c", "command": "-copyRelativeFilePath", "when": "editorFocus" },
  { "key": "ctrl+k ctrl+shift+s", "command": "-workbench.action.files.saveWithoutFormatting" },
  { "key": "ctrl+k ctrl+p", "command": "-workbench.action.showAllEditors" },
  { "key": "ctrl+k p", "command": "-workbench.action.files.copyPathOfActiveFile" },
  { "key": "ctrl+k ctrl+o", "command": "-workbench.action.files.openLocalFolder", "when": "remoteFileDialogVisible" },
  { "key": "ctrl+k r", "command": "-workbench.action.files.revealActiveFileInWindows" }, */

  // ---- git
  /*   { "key": "ctrl+k ctrl+r", "command": "-git.revertSelectedRanges", "when": "isInDiffEditor && !operationInProgress" },
  { "key": "ctrl+k ctrl+alt+s", "command": "-git.stageSelectedRanges", "when": "isInDiffEditor && !operationInProgress" },
  { "key": "ctrl+k ctrl+n", "command": "-git.unstageSelectedRanges", "when": "isInDiffEditor && !operationInProgress" }, */

  // ---- trivia
  /*   { "key": "ctrl+k m", "command": "-workbench.action.editor.changeLanguageMode", "when": "!notebookEditorFocused" },
  { "key": "ctrl+k ctrl+f", "command": "-editor.action.formatSelection", "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" }, /// disable  conflict
  { "key": "ctrl+k ctrl+q", "command": "-workbench.action.navigateToLastEditLocation" },
  { "key": "ctrl+k i", "command": "-inlineChat.start", "when": "editorFocus && inlineChatHasProvider && !editorReadonly" },
  { "key": "ctrl+k v", "command": "-markdown.showPreviewToSide", "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
  { "key": "ctrl+k ctrl+d", "command": "-editor.action.moveSelectionToNextFindMatch", "when": "editorFocus" },
  { "key": "ctrl+k ctrl+shift+n", "command": "-notifications.showList" },
  { "key": "ctrl+k ctrl+k", "command": "-editor.action.selectFromAnchorToCursor", "when": "editorTextFocus && selectionAnchorSet" },
  { "key": "ctrl+k ctrl+b", "command": "-editor.action.setSelectionAnchor", "when": "editorTextFocus" },
  { "key": "ctrl+k ctrl+x", "command": "-editor.action.trimTrailingWhitespace", "when": "editorTextFocus && !editorReadonly" },
  { "key": "ctrl+k f", "command": "-workbench.action.closeFolder", "when": "emptyWorkspaceSupport && workbenchState != 'empty'" },
  { "key": "ctrl+k ctrl+a", "command": "-keybindings.editor.addKeybinding", "when": "inKeybindings && keybindingFocus" },
  { "key": "ctrl+k ctrl+e", "command": "-keybindings.editor.defineWhenExpression", "when": "inKeybindings && keybindingFocus" },
  { "key": "ctrl+k s", "command": "-saveAll" },
  { "key": "ctrl+k shift+o", "command": "-workbench.action.compareEditor.openSide", "when": "inDiffEditor" },
  { "key": "ctrl+k f2", "command": "-togglePeekWidgetFocus", "when": "inReferenceSearchEditor || referenceSearchVisible" },
 */
  // ---- definition
  /*   { "key": "ctrl+k f12", "command": "-editor.action.revealDefinitionAside", "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
  { "key": "ctrl+k ctrl+f12", "command": "-editor.action.revealDefinitionAside", "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor" } */
]
