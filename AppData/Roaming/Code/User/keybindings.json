[
  //     ____                                        _
  //    / ___|   ___   _ __     ___   _ __    __ _  | |
  //   | |  _   / _ \ | '_ \   / _ \ | '__|  / _` | | |
  //   | |_| | |  __/ | | | | |  __/ | |    | (_| | | |
  //    \____|  \___| |_| |_|  \___| |_|     \__,_| |_|
  //

  // command palette
  { "key": "f3", "command": "workbench.action.showCommands" },

  // show context menu
  { "key": "alt+i", "command": "editor.action.showContextMenu", "when": "editorTextFocus" },

  // add selection to next find match
  { "key": "alt+n", "command": "editor.action.addSelectionToNextFindMatch", "when": "editorFocus" },

  // side bar visibility
  { "key": "shift+alt+-", "command": "workbench.action.toggleSidebarVisibility" },
  { "key": "shift+alt+=", "command": "workbench.action.toggleAuxiliaryBar" },

  // hide notification
  { "key": "escape", "command": "notifications.hideToasts", "when": "notificationToastsVisible" },

  // toggle block comment
  { "key": "ctrl+shift+/", "command": "editor.action.blockComment", "when": "editorTextFocus && !editorReadonly" },

  // change language mode
  // { "key": "ctrl+w ctrl+m", "command": "workbench.action.editor.changeLanguageMode", "when": "!notebookEditorFocused" },

  //    _____                             _                   _
  //   |_   _|   ___   _ __   _ __ ___   (_)  _ __     __ _  | |
  //     | |    / _ \ | '__| | '_ ` _ \  | | | '_ \   / _` | | |
  //     | |   |  __/ | |    | | | | | | | | | | | | | (_| | | |
  //     |_|    \___| |_|    |_| |_| |_| |_| |_| |_|  \__,_| |_|
  //
  //   section: terminal

  // terminal shortcut
  { "key": "ctrl+a c", "command": "workbench.action.terminal.new", "when": "terminalFocus" },
  { "key": "ctrl+a \\", "command": "workbench.action.terminal.split", "when": "terminalFocus" },
  { "key": "ctrl+a x", "command": "workbench.action.terminal.kill", "when": "terminalFocus" },
  /// -- terminal focus pane
  { "key": "ctrl+a ctrl+l", "command": "workbench.action.terminal.focusNextPane", "when": "terminalFocus" },
  { "key": "ctrl+a ctrl+h", "command": "workbench.action.terminal.focusPreviousPane", "when": "terminalFocus" },
  /// -- terminal focus tab
  { "key": "ctrl+a ctrl+j", "command": "workbench.action.terminal.focusPrevious", "when": "terminalFocus" },
  { "key": "ctrl+a ctrl+k", "command": "workbench.action.terminal.focusNext", "when": "terminalFocus" },
  /// -- terminal Size
  { "key": "ctrl+a z", "command": "workbench.action.toggleMaximizedPanel", "when": "terminalFocus" },
  { "key": "ctrl+a shift+j", "command": "workbench.action.decreaseViewSize", "when": "!editorFocus" },
  { "key": "ctrl+a shift+k", "command": "workbench.action.increaseViewSize", "when": "!editorFocus" },

  // -- original ctrl + a behavior
  { "key": "ctrl+a ctrl+a", "command": "editor.action.selectAll" },
  { "key": "ctrl+a ctrl+a", "command": "list.selectAll", "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused" },
  { "key": "ctrl+a ctrl+a", "command": "notebook.cell.output.selectAll", "when": "notebookEditorFocused && notebookOutputFocused" },

  //   __        __  _               _                                   ____
  //   \ \      / / (_)  _ __     __| |   ___   __      __              / ___|  _ __    ___    _   _   _ __
  //    \ \ /\ / /  | | | '_ \   / _` |  / _ \  \ \ /\ / /    _____    | |  _  | '__|  / _ \  | | | | | '_ \
  //     \ V  V /   | | | | | | | (_| | | (_) |  \ V  V /    |_____|   | |_| | | |    | (_) | | |_| | | |_) |
  //      \_/\_/    |_| |_| |_|  \__,_|  \___/    \_/\_/                \____| |_|     \___/   \__,_| | .__/
  //                                                                                                  |_|
  //   section: pane, window (group), buffer (tab)
  //   HINT: editor is similar to buffer, but display in a tab-like appearance

  // pane + window navigate
  { "key": "ctrl+h", "command": "workbench.action.navigateLeft" },
  { "key": "ctrl+j", "command": "workbench.action.navigateDown" },
  { "key": "ctrl+k", "command": "workbench.action.navigateUp" },
  { "key": "ctrl+l", "command": "workbench.action.navigateRight" },

  // window swap (vscode only)
  { "key": "ctrl+w shift+h", "command": "workbench.action.moveActiveEditorGroupLeft" },
  { "key": "ctrl+w shift+j", "command": "workbench.action.moveActiveEditorGroupDown" },
  { "key": "ctrl+w shift+k", "command": "workbench.action.moveActiveEditorGroupUp" },
  { "key": "ctrl+w shift+l", "command": "workbench.action.moveActiveEditorGroupRight" },

  //    _____          _                          _
  //   | ____| __  __ | |_    ___   _ __    ___  (_)   ___    _ __
  //   |  _|   \ \/ / | __|  / _ \ | '_ \  / __| | |  / _ \  | '_ \
  //   | |___   >  <  | |_  |  __/ | | | | \__ \ | | | (_) | | | | |
  //   |_____| /_/\_\  \__|  \___| |_| |_| |___/ |_|  \___/  |_| |_|
  //

  // which-key extension keys
  { "key": "f1", "command": "whichkey.show", "when": "editorTextFocus" },
  { "key": "f1", "command": "-workbench.action.showCommands" }, /// disable original

  // neovim
  {
    "key": "shift+space", // the key sequence to activate the binding
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.mode != insert", // don't activate during insert mode
    "args": "<S-space>" // the input to send to Neovim
  },
  { "key": "[", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "[" },
  { "key": "]", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "]" },
  { "key": "alt+a", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "<A-a>" },
  { "key": "alt+x", "command": "vscode-neovim.send", "when": "editorTextFocus && neovim.mode != insert", "args": "<A-x>" },

  // hover editor.action.showHover
  { "key": "shift+k", "command": "editor.debug.action.showDebugHover", "when": "editorTextFocus && inDebugMode" },
  { "key": "shift+k", "command": "list.showHover", "when": "listFocus && !inputFocus && !treestickyScrollFocused" },
  // -- this is neovim extension keybinding example
  // { "key": "shift+k", "command": "editor.action.showHover", "when": "editorHoverVisible && editorTextFocus && neovim.init && neovim.mode == 'normal'" },

  // mini-move
  { "key": "alt+left", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Left>" },
  { "key": "alt+right", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Right>" },
  { "key": "alt+down", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Down>" },
  { "key": "alt+up", "command": "vscode-neovim.send", "when": "editorTextFocus", "args": "<M-Up>" },
  /// -- disable: go back and forward
  { "key": "alt+left", "command": "-workbench.action.navigateBack", "when": "canNavigateBack" },
  { "key": "alt+right", "command": "-workbench.action.navigateForward", "when": "canNavigateForward" }
]
